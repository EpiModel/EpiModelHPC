% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/netsim_scenarios.R
\name{step_tmpl_netsim_scenarios}
\alias{step_tmpl_netsim_scenarios}
\title{Step template to run EpiModel network simulations with scenarios}
\usage{
step_tmpl_netsim_scenarios(
  x,
  param,
  init,
  control,
  scenarios_list,
  n_rep,
  n_cores,
  output_dir,
  libraries = NULL,
  save_pattern = "simple",
  setup_lines = NULL,
  max_array_size = NULL
)
}
\arguments{
\item{x}{Fitted network model object, as an object of class \code{netest}.
Alternatively, if restarting a previous simulation, may be an object
of class \code{netsim}.}

\item{param}{Model parameters, as an object of class \code{param.net}.}

\item{init}{Initial conditions, as an object of class \code{init.net}.}

\item{control}{Control settings, as an object of class
\code{control.net}.}

\item{scenarios_list}{A list of scenarios to be run. Produced by the
\code{EpiModel::create_scenario_list} function}

\item{n_rep}{The number of replication to be run for each scenario.}

\item{n_cores}{The number of CPUs on which the simulations will be run.}

\item{output_dir}{The folder where the simulation files are to be stored.}

\item{libraries}{A character vector containing the name of the libraries
required for the model to run. (e.g. EpiModelHIV or EpiModelCOVID)}

\item{save_pattern}{A character vector of what should be kept in the final
`netsim` objects. It can contain the names of the elements as well as:
"simple" (defautlt) to only keep "epi", "param" and "control"; "restart" to
get the elements required to restart from such file; "all" to not trim the
object at all. `c("simple", "el.cuml")` is an example of a valid pattern to
save "epi", "param", "control" and "el.cuml".}

\item{setup_lines}{(optional) a vector of bash lines to be run first.
This can be used to load the required modules (like R, python, etc).}

\item{max_array_size}{maximum number of array jobs to be submitted at the
same time. Should be strictly less than the maximum number of jobs you are
allowed to submit to slurm on your HPC.}
}
\value{
a template function to be used by \code{add_workflow_step}
}
\description{
This step template is similar to `netsim_scenarios` but for the HPC. It uses
`slurmworkflow::step_tmpl_map` internally and should be used as any
`slurmworkflow` step. For details, see `netsim_scenarios` documentation.
}
\section{Step Template}{


Step Templates are helper functions to be used within \code{add_workflow_step}.
Some basic ones are provided by the \code{slurmworkflow} package. They instruct
the workflow to run either a bash script, a set of bash lines given as a
character vector or an R script.
Additional Step Templates can be created to simplify specific tasks, see the
\code{vignette("making-a-custom-step-template")} for details.

}

