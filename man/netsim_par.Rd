% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/netsim_par.R
\name{netsim_par}
\alias{netsim_par}
\title{Stochastic Network Models in Parallel}
\usage{
netsim_par(x, param, init, control, type = "new", merge = TRUE,
  required.pkgs = NULL)
}
\arguments{
\item{x}{Fitted network model object, as an object of class \code{netest}.
Alternatively, if restarting a previous simulation, may be an object of
class \code{netsim}.}

\item{param}{Model parameters, as an object of class \code{param.net}.}

\item{init}{Initial conditions, as an object of class \code{init.net}.}

\item{control}{Control settings, as an object of class \code{control.net}.}

\item{type}{Either \code{"new"} if running a new or restarted \code{netsim}
simulation or \code{"cp"} if a checkpoint run is restarted.}

\item{merge}{If \code{TRUE}, merge parallel simulations into one \code{netsim}
object after simulation.}

\item{required.pkgs}{A character vector of R packages that must be loaded
for the simulation, necessary for MPI-based parallel simulations. If
\code{NULL}, this will load \code{EpiModel} and the first package package
listed in the "other attached packages" section of \code{sessionInfo()}.}
}
\description{
Simulates stochastic network epidemic models for infectious
             disease in parallel.
}
\details{
This function facilitates running stochastic network models in parallel, with
the intended use on linux-based high-performance computing systems. Parallel
runs may be conducted either with multi-core, single-node systems or multiple
node systems running MPI.

To run models in parallel using this function, it is necessary to add two
parameters to the control settings specified in \code{control.net}. A parameter
called \code{ncores} should be added that specifies the number of parallel
cores the simulations should use. Second, a \code{par.type} parameter should
equal either \code{"single"} to run on a single-node or \code{"mpi"} to run
on multiple nodes using MPI.

Running models in an MPI framework depends on correctly installed MPI
applications, such as Open MPI. One way to test this is by installing and
loading the \code{Rmpi} package. In fact, \code{netsim_par} uses the functionality
of the \code{doMPI} package, which depends on \code{Rmpi}.

The \code{type} argument here specifies whether the parallel simulations should
load checkpointed data. Checkpointing is when simulation data are periodically
saved in the case that a simulation job is cancelled and must be rerun from
some intermediate time step. This parameter is typically set automatically
by the \code{netsim_hpc} function, so would not need to be changed manually.
}
\examples{
\dontrun{
nw <- network.initialize(n = 1000, directed = FALSE)
formation <- ~ edges
target.stats <- 500
dissolution <- ~ offset(edges)
duration <- 50
coef.diss <- dissolution_coefs(dissolution, duration)

est <- netest(nw,
              formation,
              dissolution,
              target.stats,
              coef.diss,
              verbose = FALSE)

param <- param.net(inf.prob = 0.25)
init <- init.net(i.num = 50)

# Runs multicore-type parallelization on single node
control <- control.net(type = "SI", nsteps = 100, verbose = FALSE,
                       par.type = "single", nsims = 4, ncores = 4)

# Note: one should do this function call in batch mode
sims <- netsim_par(est, param, init, control)

# Runs parallelization across nodes using MPI
control <- control.net(type = "SI", nsteps = 100, verbose = FALSE,
                       par.type = "mpi", nsims = 4, ncores = 4)

# This would be included in the script file called by mpirun
sims <- netsim_par(est, param, init, control)
}

}

